{"version":3,"sources":["components/DriverSelector.tsx","components/DriverList.tsx","functions.ts","components/DriverMarker.tsx","components/EventMarker.tsx","components/Map.tsx","components/EventsList.tsx","components/EventInfo.tsx","components/DriverPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DriverSelector","driver","className","driverName","DriverList","currentDriver","drivers","clickHandler","list","map","index","driverId","onClick","defaultDriver","length","timestampToDateStr","timestamp","now","Date","offsetMs","getTimezoneOffset","getTime","toISOString","slice","replace","DriverMarker","useState","infoWindowVisibility","setInfoWindowVisibility","position","events","pos","onCloseClick","Pin","url","origin","x","y","event","icon","defaultCenter","lat","lng","containerStyle","visible","height","mapStyle","withGoogleMap","recenter","defaultZoom","options","gestureHandling","center","DriverEventDisplay","clickHandle","selected","eventTime","routeId","routeName","speed","eventType","foggy","rainy","windy","congestionLevel","EventsList","eventSelectHandle","undefined","selectedEvent","setSelectedEvent","topRowRef","useRef","useEffect","current","scrollIntoView","ref","num","selectEvent","formatCoords","require","EventInfo","format","DriverPage","currentDriverHandler","eventInfoRender","setEventInfoRender","currentEvent","setCurrentEvent","truckId","Map","containerElement","style","mapElement","App","setDrivers","setCurrentDriver","setRecenter","path","callback","window","location","href","fetch","then","response","json","reason","console","log","myJson","err","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28959ae1.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"../css/DriverList.css\";\r\nimport { Driver } from '../types'\r\n\r\nexport default function DriverSelector({driver}:{driver?:Driver}) {\r\n    return(\r\n        <div className=\"DriverSelect-wrapper\">\r\n            <p className=\"DriverSelect-name\">\r\n                {driver?.driverName || \"No driver\"}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport \"../css/DriverList.css\";\r\nimport DriverSelect from \"./DriverSelector\"\r\nimport { Driver, Handler2 } from '../types'\r\n\r\nexport default function DriverList({currentDriver, drivers,clickHandler}:{currentDriver?:Driver, drivers:Driver[], clickHandler:Handler2<Driver|undefined, boolean>}) {\r\n    const list = drivers.map((driver, index) => (\r\n        <li className = {\"DriverList-Selector button \" + (driver.driverId === currentDriver?.driverId ? \"selected\" : \"\")} key={driver.driverName + index} onClick={() => clickHandler(driver, true)}>\r\n            <DriverSelect driver={driver}/>\r\n        </li>\r\n    ));\r\n\r\n    // No driver display\r\n    const defaultDriver = (\r\n        <li className=\"DriverList-Selector\">\r\n            <DriverSelect/>\r\n        </li>\r\n    )\r\n    \r\n    return(\r\n        <ul className=\"DriverList-Wrapper\">\r\n            { list.length ? list : defaultDriver }\r\n        </ul>\r\n    )\r\n}\r\n\r\n","import {Handler} from \"./types\"\r\n\r\n// Json loading and parsing\r\nexport function LoadJson(path:string, callback:Handler<any>) {\r\n\tfetch(path)\r\n\t.then(response => {\r\n\t\treturn response.json()\r\n\t}, reason => {\r\n\t\tconsole.log(reason);\r\n\t})\r\n\t.then(myJson => {\r\n\t\tcallback(myJson)\r\n\t}, err => {\r\n\t\tconsole.log(err);\r\n\t})\r\n}\r\n\r\nexport function timestampToDateStr(timestamp:number) {\r\n\tconst now = new Date(timestamp);\r\n    const offsetMs = now.getTimezoneOffset() * 60 * 1000;\r\n    const dateLocal = new Date(now.getTime() - offsetMs);\r\n    return dateLocal.toISOString().slice(0, 19).replace(/-/g, \"/\").replace(\"T\", \" \");\r\n}","import React, { useState } from 'react';\r\nimport { Driver, Handler2 } from '../types';\r\nimport { Marker, InfoWindow } from 'react-google-maps';\r\n\r\n// const Pin = {url:\"http://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png\", origin:{x:-10,y:0}};\r\n\r\nexport default function DriverMarker({driver, clickHandler}:{driver:Driver, clickHandler:Handler2<Driver, boolean>}) {\r\n    const [infoWindowVisibility, setInfoWindowVisibility] = useState<boolean>(false);\r\n    \r\n    const onClick = () => {\r\n        setInfoWindowVisibility(!infoWindowVisibility);\r\n        clickHandler(driver, false);\r\n    }\r\n    \r\n    return (\r\n        <Marker \r\n            position={driver.events[0].pos}\r\n            onClick={onClick}\r\n        >\r\n            { infoWindowVisibility && \r\n                <InfoWindow onCloseClick={() => setInfoWindowVisibility(false)}>\r\n                    <p>{driver.driverName}</p>\r\n                </InfoWindow>\r\n            }\r\n        </Marker>\r\n    )\r\n}","import React from 'react';\r\nimport { DriverEvent } from '../types';\r\nimport { Marker } from 'react-google-maps';\r\n\r\nconst Pin = {url:\"http://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png\", origin:{x:-12,y:0}};\r\n\r\nexport default function DriverMarker({event}:{event?:DriverEvent}) {\r\n    return (\r\n        <Marker position={event?.pos} icon={Pin}/>\r\n    )\r\n}","import React from 'react';\r\nimport { Driver, DriverEvent, Handler2 } from '../types';\r\nimport { GoogleMap, withGoogleMap } from 'react-google-maps';\r\nimport DriverMarker from './DriverMarker';\r\nimport EventMarker from './EventMarker'\r\n\r\nconst defaultCenter = {\r\n    // // Paris coordonates\r\n    // lat: 48.856614,\r\n    // lng: 2.3522219\r\n    lat:35.191766965947394,\r\n    lng:-90.0439453125\r\n}\r\n\r\nconst containerStyle = (visible:boolean) => ({ \r\n    height: (visible ? `50vh` : \"0\")\r\n})\r\n\r\nconst mapStyle = { \r\n    height: `100%`\r\n}\r\n\r\nexport const MapStyle = (visible:boolean) => ({\r\n    containerElement: <div style={containerStyle(visible)} />,\r\n    mapElement: <div style={mapStyle} />\r\n})\r\n\r\n\r\nfunction MapRender({recenter, currentDriver, drivers, clickHandler, event}:{recenter:boolean,currentDriver?:Driver, drivers:Driver[], clickHandler:Handler2<Driver, boolean>, event?:DriverEvent}) {\r\n    return(\r\n        <GoogleMap\r\n            defaultZoom={5}\r\n            defaultCenter={defaultCenter}\r\n            // disable \"CTRL + scroll to zoom\" message\r\n            options={{ gestureHandling: \"greedy\" }}\r\n            {...(recenter && currentDriver ? {center:currentDriver.events[0].pos} : {})}\r\n        >\r\n            {/* For unknown reason the map function give error if the is other siblings elements (only for synthax check, but compile properly) \r\n                So I wrap the map function in <></>\r\n                This is kinda ugly but it get rid of the \"Excessive stack depth comparing types 'FlatArray<Arr, ?>' and 'FlatArray<Arr, ?>'.\" error */}\r\n            <>\r\n            {drivers.map((driver, index) => (\r\n                // for ***** reason having 2 marker at the same position makes them unable to be deleted, so we make sure we don't put 2 marker atthe same place\r\n                driver.events[0].pos !== event?.pos && <DriverMarker key={driver.driverName + index} driver={driver} clickHandler={clickHandler} />\r\n            ))}\r\n            </>\r\n            <EventMarker event={event}/>\r\n        </GoogleMap>\r\n    )\r\n}\r\n\r\nexport default withGoogleMap(MapRender);\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport \"../css/DriverEvents.css\";\r\nimport { Driver, DriverEvent, Handler } from '../types'\r\nimport { timestampToDateStr } from \"../functions\"\r\n\r\nfunction DriverEventDisplay({event, clickHandle, selected}:{event:DriverEvent, clickHandle:Handler<never>, selected:boolean}) {\r\n    return(\r\n        <tr onClick={clickHandle} className={\"button \" + (selected ? \"selected\" : \"\")}>\r\n            <td className=\"driverEvent-big\">{timestampToDateStr(event.eventTime)}</td>\r\n            <td className=\"driverEvent-small\">{event.routeId}</td>\r\n            <td className=\"driverEvent-big\">{event.routeName}</td>\r\n            <td className=\"driverEvent-small\">{event.speed}</td>\r\n            <td className=\"driverEvent-big\">{event.eventType}</td>\r\n            <td className=\"driverEvent-small\">{event.foggy ? \"True\" : \"False\"}</td>\r\n            <td className=\"driverEvent-small\">{event.rainy ? \"True\" : \"False\"}</td>\r\n            <td className=\"driverEvent-small\">{event.windy ? \"True\" : \"False\"}</td>\r\n            <td className=\"driverEvent-last\">{event.congestionLevel}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default function EventsList({eventSelectHandle, currentDriver}:{eventSelectHandle:Handler<DriverEvent|undefined>, currentDriver:Driver}) {\r\n    const [selectedEvent, setSelectedEvent] = useState<number|undefined>(undefined)\r\n\r\n    // top row of the table reference\r\n    const topRowRef = useRef<HTMLTableRowElement>(null);\r\n\r\n    useEffect(() => {\r\n        setSelectedEvent(undefined);\r\n        // scroll back to top when switching driver\r\n        topRowRef.current?.scrollIntoView();\r\n    },[currentDriver]);\r\n    \r\n\r\n    const selectEvent = (event:DriverEvent, num:number) => {\r\n        setSelectedEvent(num);\r\n        eventSelectHandle(event);\r\n    }\r\n\r\n    return(\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th className=\"driverEvent-big\">Date :</th>\r\n                    <th className=\"driverEvent-small\">Route ID :</th>\r\n                    <th className=\"driverEvent-big\">Route name :</th>\r\n                    <th className=\"driverEvent-small\">Speed :</th>\r\n                    <th className=\"driverEvent-big\">Event type :</th>\r\n                    <th className=\"driverEvent-small\">Foggy :</th>\r\n                    <th className=\"driverEvent-small\">Rainy :</th>\r\n                    <th className=\"driverEvent-small\">Windy :</th>\r\n                    <th className=\"driverEvent-big\">Congestion level :</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                { /* need this empty row to scroll back to the top */ }\r\n                <tr ref={topRowRef}></tr>\r\n                { /* same horrendous synthax error has in Map.tsx */ }\r\n                <>\r\n                {currentDriver.events.map((event, index) => (\r\n                    <DriverEventDisplay key={event.routeName + index} selected={index === selectedEvent} event={event} clickHandle={() => { selectEvent(event, index)} }/>\r\n                ))}\r\n                </>\r\n            </tbody>\r\n            \r\n        </table>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport \"../css/DriverPage.css\";\r\nimport { DriverEvent } from '../types'\r\nimport { timestampToDateStr } from \"../functions\"\r\n\r\n// no typescript version of this package, but it does exactly what I need so im gonna use it anyway\r\nconst formatCoords = require('formatcoords')\r\n\r\n\r\nexport default function EventInfo({event}:{event:DriverEvent}) {\r\n    return(\r\n        <div>\r\n            <p>Date : {timestampToDateStr(event.eventTime)}</p>\r\n            <p>Route ID : {event.routeId}</p>\r\n            <p>Route Name : {event.routeName}</p>\r\n            <p>Speed : {event.speed}</p>\r\n            <p>Event type : {event.eventType}</p>\r\n            <p>Foggy : {event.foggy ? \"True\" : \"False\"}</p>\r\n            <p>Rainy : {event.rainy ? \"True\" : \"False\"}</p>\r\n            <p>Windy : {event.windy ? \"True\" : \"False\"}</p>\r\n            <p>Congestion level : {event.congestionLevel}</p>\r\n            <p>Event position : {formatCoords(event.pos.lat, event.pos.lng).format()}</p>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport \"../css/DriverPage.css\";\r\nimport { Driver, DriverEvent, Handler2 } from '../types'\r\nimport Map, {MapStyle} from './Map'\r\nimport EventsList from \"./EventsList\"\r\nimport EventInfo from \"./EventInfo\"\r\n\r\n\r\nexport default function DriverPage({currentDriver, drivers, recenter, currentDriverHandler}:{currentDriverHandler:Handler2<Driver, boolean>, currentDriver?:Driver, drivers:Driver[], recenter:boolean}) {\r\n    const [eventInfoRender, setEventInfoRender] = useState<boolean>(false);\r\n    const [currentEvent, setCurrentEvent] = useState<DriverEvent|undefined>(undefined)\r\n\r\n    const changePageHandler = () => setEventInfoRender(!eventInfoRender)\r\n\r\n    useEffect(() => {\r\n        setCurrentEvent(undefined);\r\n    },[currentDriver]);\r\n\r\n    return (\r\n        <div className=\"DriverPage-wrapper\">\r\n            <div className=\"DriverPage-info-wrapper\">\r\n                <div className=\"DriverPage-info\">\r\n                    <p>Driver Name : {currentDriver === undefined ? \"No driver selected.\" : currentDriver.driverName} \r\n                    <br/>Truck ID : {currentDriver?.truckId}</p>\r\n                </div>\r\n                { currentDriver &&  <div className=\"DriverPage-switch-button button\" onClick={changePageHandler}>\r\n                    <p>\r\n                        {eventInfoRender ? \"Events Map Page\" : \"Events Info Page\"}\r\n                    </p>\r\n                </div> }\r\n            </div>\r\n\r\n            <Map recenter={recenter} currentDriver={currentDriver} drivers={drivers} clickHandler={currentDriverHandler} event={currentEvent} {...(MapStyle(!eventInfoRender))}/>\r\n            \r\n            { currentDriver && <EventsList currentDriver={currentDriver} eventSelectHandle={setCurrentEvent} /> }\r\n            \r\n            { eventInfoRender && currentEvent &&  <EventInfo event={currentEvent} />}\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\r\nimport './css/App.css';\r\nimport DriverList from './components/DriverList';\r\nimport { Driver } from './types';\r\nimport { LoadJson } from \"./functions\"\r\nimport DriverPage from './components/DriverPage'\r\n\r\nfunction App() {\r\n\t// hooks creation\r\n\tconst [drivers, setDrivers] = useState<Driver[]>([]);\r\n\tconst [currentDriver, setCurrentDriver] = useState<Driver|undefined>(undefined);\r\n\tconst [recenter, setRecenter] = useState<boolean>(false);\r\n\r\n\t// json fetching on reload\r\n\tuseEffect(()=>{\r\n    \tLoadJson(window.location.href + \"/drivers.json\", setDrivers);\r\n\t},[])\r\n\r\n\t// click handler\r\n\tconst currentDriverHandler = (driver:Driver|undefined, recenter:boolean) => {\r\n\t\tsetRecenter(recenter);\r\n\t\tsetCurrentDriver(driver);\r\n\t}\r\n\r\n\t// rendering\r\n\treturn (\r\n\t\t<div className=\"app-wrapper\">\r\n\t\t\t<div className=\"app-driverList\">\r\n\t\t\t\t<DriverList currentDriver={currentDriver} drivers={drivers} clickHandler={currentDriverHandler}/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"app-driverPage\">\r\n\t\t\t\t<DriverPage currentDriver={currentDriver} drivers={drivers} currentDriverHandler={currentDriverHandler} recenter={recenter} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}