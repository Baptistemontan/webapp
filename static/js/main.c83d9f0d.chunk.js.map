{"version":3,"sources":["components/DriverList.tsx","functions.ts","components/DriverMarker.tsx","components/EventMarker.tsx","components/Map.tsx","components/EventsList.tsx","components/EventInfo.tsx","components/DriverPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DriverSelector","driver","className","driverName","DriverList","currentDriver","drivers","clickHandler","list","map","index","onClick","defaultDriver","length","timestampToDateStr","timestamp","now","Date","offsetMs","getTimezoneOffset","getTime","toISOString","slice","replace","driverEventTimeComp","a","b","eventTime","driverEventPosFilter","val","self","pos","lat","lng","driverEventRouteIdComp","routeId","driverEventRouteNameComp","routeName","localeCompare","driverEventSpeedComp","speed","driverEventTypeComp","eventType","driverEventCongestionLvlComp","congestionLevel","driverEventWindyComp","windy","driverEventRainyComp","rainy","driverEventFoggyComp","foggy","DriverMarker","useState","infoWindowVisibility","setInfoWindowVisibility","position","events","onCloseClick","Pin","url","origin","x","y","event","icon","defaultCenter","containerStyle","visible","height","mapStyle","withGoogleMap","recenter","defaultZoom","options","gestureHandling","center","classBig","classSma","DriverEventDisplay","clickHandle","selected","EventsList","currentEvent","eventSelectHandle","reversedComp","setReversedComp","currentComp","setCurrentComp","topRowRef","useRef","useEffect","current","scrollIntoView","foo","reversed","SortBy","sortFn","ref","filter","sort","formatCoords","require","EventInfo","format","DriverPage","currentDriverHandler","eventInfoRender","setEventInfoRender","undefined","setCurrentEvent","truckId","Map","containerElement","style","mapElement","App","setDrivers","setCurrentDriver","setRecenter","path","callback","window","location","href","fetch","then","response","json","reason","console","log","myJson","err","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c83d9f0d.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"../css/DriverList.css\";\r\nimport { Driver, Handler2 } from '../types'\r\n\r\nfunction DriverSelector({driver}:{driver?:Driver}) {\r\n    return(\r\n        <div className=\"DriverSelect-wrapper\">\r\n            <p className=\"DriverSelect-name\">\r\n                {driver?.driverName || \"No driver\"}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function DriverList({currentDriver, drivers,clickHandler}:{currentDriver?:Driver, drivers:Driver[], clickHandler:Handler2<Driver|undefined, boolean>}) {\r\n    const list = drivers.map((driver, index) => (\r\n        <li className = {\"DriverList-Selector button \" + (driver === currentDriver ? \"selected\" : \"\")} key={driver.driverName + index} onClick={() => clickHandler(driver, true)}>\r\n            <DriverSelector driver={driver}/>\r\n        </li>\r\n    ));\r\n\r\n    // No driver display\r\n    const defaultDriver = (\r\n        <li className=\"DriverList-Selector\">\r\n            <DriverSelector />\r\n        </li>\r\n    )\r\n    \r\n    return (\r\n        <ul className=\"DriverList-Wrapper noselect\">\r\n            { list.length ? list : defaultDriver }\r\n        </ul>\r\n    )\r\n}\r\n\r\n","import {Handler, DriverEvent, CompFunc } from \"./types\"\r\n\r\n// Json loading and parsing\r\nexport function LoadJson(path:string, callback:Handler<any>) {\r\n\tfetch(path)\r\n\t.then(response => {\r\n\t\treturn response.json()\r\n\t}, reason => {\r\n\t\tconsole.log(reason);\r\n\t})\r\n\t.then(myJson => {\r\n\t\tcallback(myJson)\r\n\t}, err => {\r\n\t\tconsole.log(err);\r\n\t})\r\n}\r\n\r\nexport function timestampToDateStr(timestamp:number) {\r\n\tconst now = new Date(timestamp);\r\n    const offsetMs = now.getTimezoneOffset() * 60 * 1000;\r\n    const dateLocal = new Date(now.getTime() - offsetMs);\r\n    return dateLocal.toISOString().slice(0, 19).replace(/-/g, \"/\").replace(\"T\", \" \");\r\n}\r\n\r\nexport function driverEventTimeComp(a:DriverEvent, b:DriverEvent) {\r\n\treturn b.eventTime - a.eventTime;\r\n}\r\n\r\nfunction driverEventPosComp(a:DriverEvent, b:DriverEvent) {\r\n\treturn a.pos.lat === b.pos.lat && a.pos.lng === b.pos.lng;\r\n}\r\n\r\nexport function driverEventPosFilter(val:DriverEvent, index:number, self:DriverEvent[]) {\r\n\treturn !index || !driverEventPosComp(val, self[index - 1]);\r\n}\r\n\r\nexport function driverEventRouteIdComp(a:DriverEvent, b:DriverEvent) {\r\n\treturn b.routeId - a.routeId;\r\n}\r\n\r\nexport function driverEventRouteNameComp(a:DriverEvent, b:DriverEvent) {\r\n\treturn b.routeName.localeCompare(a.routeName);\r\n}\r\n\r\nexport function driverEventSpeedComp(a:DriverEvent, b:DriverEvent) {\r\n\treturn b.speed - a.speed;\r\n}\r\n\r\nexport function driverEventTypeComp(a:DriverEvent, b:DriverEvent) {\r\n\treturn b.eventType.localeCompare(a.eventType);\r\n}\r\n\r\nexport function driverEventCongestionLvlComp(a:DriverEvent, b:DriverEvent) {\r\n\treturn b.congestionLevel - a.congestionLevel;\r\n}\r\n\r\nexport function driverEventWindyComp(a:DriverEvent, b:DriverEvent) {\r\n\tif(a.windy === b.windy) return 0;\r\n\tif(a.windy) return -1;\r\n\treturn 1;\r\n}\r\n\r\nexport function driverEventRainyComp(a:DriverEvent, b:DriverEvent) {\r\n\tif(a.rainy === b.rainy) return 0;\r\n\tif(a.rainy) return -1;\r\n\treturn 1;\r\n}\r\n\r\nexport function driverEventFoggyComp(a:DriverEvent, b:DriverEvent) {\r\n\tif(a.foggy === b.foggy) return 0;\r\n\tif(a.foggy) return -1;\r\n\treturn 1;\r\n}\r\n\r\nexport function compWay<T>(foo:CompFunc<T>, reversed:boolean) {\r\n\tconst bar:CompFunc<T> = (a,b) => (reversed ? -1 : 1) * foo(a,b);\r\n\treturn bar;\r\n}","import React, { useState } from 'react';\r\nimport { Driver, Handler2 } from '../types';\r\nimport { Marker, InfoWindow } from 'react-google-maps';\r\n\r\n// const Pin = {url:\"http://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png\", origin:{x:-10,y:0}};\r\n\r\nexport default function DriverMarker({driver, clickHandler}:{driver:Driver, clickHandler:Handler2<Driver, boolean>}) {\r\n    const [infoWindowVisibility, setInfoWindowVisibility] = useState<boolean>(false);\r\n    \r\n    const onClick = () => {\r\n        setInfoWindowVisibility(!infoWindowVisibility);\r\n        clickHandler(driver, false);\r\n    }\r\n    \r\n    return (\r\n        <Marker \r\n            position={driver.events[0].pos}\r\n            onClick={onClick}\r\n        >\r\n            { infoWindowVisibility && \r\n                <InfoWindow onCloseClick={() => setInfoWindowVisibility(false)}>\r\n                    <p>{driver.driverName}</p>\r\n                </InfoWindow>\r\n            }\r\n        </Marker>\r\n    )\r\n}","import React from 'react';\r\nimport { DriverEvent } from '../types';\r\nimport { Marker } from 'react-google-maps';\r\n\r\nconst Pin = {url:\"http://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png\", origin:{x:-12,y:0}};\r\n\r\nexport default function DriverMarker({event}:{event?:DriverEvent}) {\r\n    return (\r\n        <Marker position={event?.pos} icon={Pin}/>\r\n    )\r\n}","import React from 'react';\r\nimport { Driver, DriverEvent, Handler2 } from '../types';\r\nimport { GoogleMap, withGoogleMap } from 'react-google-maps';\r\nimport DriverMarker from './DriverMarker';\r\nimport EventMarker from './EventMarker'\r\n\r\nconst defaultCenter = {\r\n    // // Paris coordonates\r\n    // lat: 48.856614,\r\n    // lng: 2.3522219\r\n    lat:35.191766965947394,\r\n    lng:-90.0439453125\r\n}\r\n\r\nconst containerStyle = (visible:boolean) => ({ \r\n    height: (visible ? `50vh` : \"0\")\r\n})\r\n\r\nconst mapStyle = { \r\n    height: `100%`\r\n}\r\n\r\nexport const MapStyle = (visible:boolean) => ({\r\n    containerElement: <div style={containerStyle(visible)} />,\r\n    mapElement: <div style={mapStyle} />\r\n})\r\n\r\n\r\nfunction MapRender({recenter, currentDriver, drivers, clickHandler, event}:{recenter:boolean,currentDriver?:Driver, drivers:Driver[], clickHandler:Handler2<Driver, boolean>, event?:DriverEvent}) {\r\n    return(\r\n        <GoogleMap\r\n            defaultZoom={5}\r\n            defaultCenter={defaultCenter}\r\n            // disable \"CTRL + scroll to zoom\" message\r\n            options={{ gestureHandling: \"greedy\" }}\r\n            {...(recenter && currentDriver ? {center:currentDriver.events[0].pos} : {})}\r\n        >\r\n            {drivers.map((driver, index) => (\r\n                // for ***** reason having 2 marker at the same position makes them unable to be deleted, so we make sure we don't put 2 marker atthe same place\r\n                driver.events[0].pos !== event?.pos && <DriverMarker key={driver.driverName + index} driver={driver} clickHandler={clickHandler} />\r\n            ))}\r\n            <EventMarker event={event}/>\r\n        </GoogleMap>\r\n    )\r\n}\r\n\r\nexport default withGoogleMap(MapRender);\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport \"../css/DriverEvents.css\";\r\nimport \"../css/DriverList.css\";\r\nimport { Driver, DriverEvent, Handler, CompFunc } from '../types'\r\nimport { timestampToDateStr, driverEventPosFilter, driverEventTimeComp, compWay, driverEventCongestionLvlComp, driverEventRouteIdComp, driverEventTypeComp, driverEventRouteNameComp, driverEventSpeedComp, driverEventWindyComp, driverEventFoggyComp, driverEventRainyComp } from \"../functions\"\r\n\r\nconst classBig = \"driverEvent-big\";\r\nconst classSma = \"driverEvent-small\";\r\n\r\nfunction DriverEventDisplay({event, clickHandle, selected}:{event:DriverEvent, clickHandle:Handler<never>, selected:boolean}) {\r\n    return(\r\n        <tr onClick={clickHandle} className={\"button \" + (selected ? \"selected\" : \"\")}>\r\n            <td className={classBig}>{timestampToDateStr(event.eventTime)}</td>\r\n            <td className={classSma}>{event.routeId}</td>\r\n            <td className={classBig}>{event.routeName}</td>\r\n            <td className={classSma}>{event.speed}</td>\r\n            <td className={classBig}>{event.eventType}</td>\r\n            <td className={classSma}>{event.foggy ? \"True\" : \"False\"}</td>\r\n            <td className={classSma}>{event.rainy ? \"True\" : \"False\"}</td>\r\n            <td className={classSma}>{event.windy ? \"True\" : \"False\"}</td>\r\n            <td className=\"driverEvent-last\">{event.congestionLevel}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default function EventsList({currentEvent, eventSelectHandle, currentDriver}:{currentEvent?:DriverEvent, eventSelectHandle:Handler<DriverEvent|undefined>, currentDriver:Driver}) {\r\n    const [reversedComp, setReversedComp] = useState<boolean>(false);\r\n    const [currentComp, setCurrentComp] = useState<CompFunc<DriverEvent>>(()=> driverEventTimeComp);\r\n\r\n    // top row of the table reference\r\n    const topRowRef = useRef<HTMLTableRowElement>(null);\r\n\r\n    // execute when switching driver\r\n    useEffect(() => {\r\n        // reset all states\r\n        setReversedComp(false);\r\n        setCurrentComp(() => driverEventTimeComp);\r\n        // scroll back to top when switching driver\r\n        topRowRef.current?.scrollIntoView();\r\n    },[currentDriver]);\r\n    \r\n    const SortBy = (sortFn:CompFunc<DriverEvent>) => {\r\n        if(currentComp === sortFn) {\r\n            setReversedComp(!reversedComp);\r\n        } else {\r\n            setReversedComp(false);\r\n            setCurrentComp(() => sortFn);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <table className=\"noselect\">\r\n            <thead>\r\n                <tr className=\"driverEvent-Title\">\r\n                    <th className={classBig} onClick={() => SortBy(driverEventTimeComp)}><div>Date :</div></th>\r\n                    <th className={classSma} onClick={() => SortBy(driverEventRouteIdComp)}><div>Route ID :</div></th>\r\n                    <th className={classBig} onClick={() => SortBy(driverEventRouteNameComp)}><div>Route name :</div></th>\r\n                    <th className={classSma} onClick={() => SortBy(driverEventSpeedComp)}><div>Speed :</div></th>\r\n                    <th className={classBig} onClick={() => SortBy(driverEventTypeComp)}><div>Event type :</div></th>\r\n                    <th className={classSma} onClick={() => SortBy(driverEventFoggyComp)}><div>Foggy :</div></th>\r\n                    <th className={classSma} onClick={() => SortBy(driverEventRainyComp)}><div>Rainy :</div></th>\r\n                    <th className={classSma} onClick={() => SortBy(driverEventWindyComp)}><div>Windy :</div></th>\r\n                    <th className={classBig} onClick={() => SortBy(driverEventCongestionLvlComp)}><div>Congestion level :</div></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                { /* need this empty row to scroll back to the top */ }\r\n                <tr ref={topRowRef}></tr>\r\n                {currentDriver.events.filter(driverEventPosFilter).sort(compWay(currentComp, reversedComp)).map((event, index) => (\r\n                    <DriverEventDisplay key={event.eventTime + index} selected={event === currentEvent} event={event} clickHandle={() => eventSelectHandle(event) }/>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport \"../css/DriverPage.css\";\r\nimport { DriverEvent } from '../types'\r\nimport { timestampToDateStr } from \"../functions\"\r\n\r\n// no typescript version of this package, but it does exactly what I need so im gonna use it anyway\r\nconst formatCoords = require('formatcoords')\r\n\r\n\r\nexport default function EventInfo({event}:{event:DriverEvent}) {\r\n    return(\r\n        <div>\r\n            <p><b>Date :</b> {timestampToDateStr(event.eventTime)}</p>\r\n            <p><b>Route ID :</b> {event.routeId}</p>\r\n            <p><b>Route Name :</b> {event.routeName}</p>\r\n            <p><b>Speed :</b> {event.speed} km/h</p>\r\n            <p><b>Event type :</b> {event.eventType}</p>\r\n            <p><b>Foggy :</b> {event.foggy ? \"True\" : \"False\"}</p>\r\n            <p><b>Rainy :</b> {event.rainy ? \"True\" : \"False\"}</p>\r\n            <p><b>Windy :</b> {event.windy ? \"True\" : \"False\"}</p>\r\n            <p><b>Congestion level :</b> {event.congestionLevel}</p>\r\n            <p><b>Event position :</b> {formatCoords(event.pos.lat, event.pos.lng).format()}</p>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport \"../css/DriverPage.css\";\r\nimport { Driver, DriverEvent, Handler2 } from '../types'\r\nimport Map, {MapStyle} from './Map'\r\nimport EventsList from \"./EventsList\"\r\nimport EventInfo from \"./EventInfo\"\r\n\r\n\r\nexport default function DriverPage({currentDriver, drivers, recenter, currentDriverHandler}:{currentDriverHandler:Handler2<Driver, boolean>, currentDriver?:Driver, drivers:Driver[], recenter:boolean}) {\r\n    const [eventInfoRender, setEventInfoRender] = useState<boolean>(false);\r\n    const [currentEvent, setCurrentEvent] = useState<DriverEvent|undefined>(undefined)\r\n\r\n    // switch beetween event info page and event map page\r\n    const changePageHandler = () => setEventInfoRender(!eventInfoRender)\r\n\r\n    // trigger everytime the selected drive change\r\n    useEffect(() => {\r\n        setCurrentEvent(undefined);\r\n    },[currentDriver]);\r\n\r\n    return (\r\n        <div className=\"DriverPage-wrapper\">\r\n            <div className=\"DriverPage-info-wrapper\">\r\n                <div className=\"DriverPage-info\">\r\n                    <p>Driver Name : {currentDriver === undefined ? \"No driver selected.\" : currentDriver.driverName} \r\n                    <br/>Truck ID : {currentDriver?.truckId}</p>\r\n                </div>\r\n                { currentDriver &&  <div className=\"DriverPage-switch-button button noselect\" onClick={changePageHandler}>\r\n                    <p>\r\n                        {eventInfoRender ? \"Events Map Page\" : \"Events Info Page\"}\r\n                    </p>\r\n                </div> }\r\n            </div>\r\n\r\n            <Map recenter={recenter} currentDriver={currentDriver} drivers={drivers} clickHandler={currentDriverHandler} event={currentEvent} {...(MapStyle(!eventInfoRender))}/>\r\n            \r\n            { currentDriver && <EventsList currentEvent={currentEvent} currentDriver={currentDriver} eventSelectHandle={setCurrentEvent} /> }\r\n            \r\n            { eventInfoRender && currentEvent &&  <EventInfo event={currentEvent} />}\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\r\nimport './css/App.css';\r\nimport DriverList from './components/DriverList';\r\nimport { Driver } from './types';\r\nimport { LoadJson } from \"./functions\"\r\nimport DriverPage from './components/DriverPage'\r\n\r\nfunction App() {\r\n\t// hooks creation\r\n\tconst [drivers, setDrivers] = useState<Driver[]>([]);\r\n\tconst [currentDriver, setCurrentDriver] = useState<Driver|undefined>(undefined);\r\n\tconst [recenter, setRecenter] = useState<boolean>(false);\r\n\r\n\t// json fetching on reload\r\n\tuseEffect(()=>{\r\n    \tLoadJson(window.location.href + \"/drivers.json\", setDrivers);\r\n\t},[])\r\n\r\n\t// click handler\r\n\tconst currentDriverHandler = (driver:Driver|undefined, recenter:boolean) => {\r\n\t\tsetRecenter(recenter);\r\n\t\tsetCurrentDriver(driver);\r\n\t}\r\n\r\n\t// rendering\r\n\treturn (\r\n\t\t<div className=\"app-wrapper\">\r\n\t\t\t<div className=\"app-driverList\">\r\n\t\t\t\t<DriverList currentDriver={currentDriver} drivers={drivers} clickHandler={currentDriverHandler}/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"app-driverPage\">\r\n\t\t\t\t<DriverPage currentDriver={currentDriver} drivers={drivers} currentDriverHandler={currentDriverHandler} recenter={recenter} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}