{"version":3,"sources":["components/DriverSelector.tsx","components/DriverList.tsx","components/DriverMarker.tsx","components/EventMarker.tsx","components/Map.tsx","components/DriverEvents.tsx","components/DriverMap.tsx","components/DriverInfo.tsx","App.tsx","loadJson.ts","reportWebVitals.ts","index.tsx"],"names":["DriverSelector","driver","className","driverName","DriverList","currentDriver","drivers","clickHandler","list","map","index","driverId","onClick","defaultDriver","length","DriverMarker","useState","infoWindowVisibility","setInfoWindowVisibility","position","events","pos","onCloseClick","Pin","url","origin","x","y","event","icon","defaultCenter","lat","lng","MapStyle","containerElement","style","height","mapElement","withGoogleMap","recenter","defaultZoom","options","gestureHandling","center","DriverEventDisplay","clickHandle","selected","now","Date","eventTime","offsetMs","getTimezoneOffset","str","getTime","toISOString","slice","replace","routeId","routeName","speed","eventType","foggy","rainy","windy","congestionLevel","DriverEvents","eventSelectHandle","undefined","selectedEvent","setSelectedEvent","setDriver","num","selectEvent","DriverMap","changeDriverHandler","changePageHandler","changeEventHandler","currentEvent","truckId","Map","DriverInfo","App","setDrivers","setCurrentDriver","setRecenter","infoPage","setInfoPage","setCurrentEvent","useEffect","path","callback","window","location","href","fetch","then","response","json","reason","console","log","myJson","err","currentDriverHandler","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2cfc5341.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"../css/DriverList.css\";\r\nimport { Driver } from '../types'\r\n\r\nexport default function DriverSelector({driver}:{driver?:Driver}) {\r\n    return(\r\n        <div className=\"DriverSelect-wrapper\">\r\n            <p className=\"DriverSelect-name\">\r\n                {driver?.driverName || \"No driver\"}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport \"../css/DriverList.css\";\r\nimport DriverSelect from \"./DriverSelector\"\r\nimport { Driver, Handler2 } from '../types'\r\n\r\nexport default function DriverList({currentDriver, drivers,clickHandler}:{currentDriver?:Driver, drivers:Driver[], clickHandler:Handler2<Driver|undefined, boolean>}) {\r\n    const list = drivers.map((driver, index) => (\r\n        <li className = {\"DriverList-Selector button \" + (driver.driverId === currentDriver?.driverId ? \"selected\" : \"\")} key={driver.driverName + index} onClick={() => clickHandler(driver, true)}>\r\n            <DriverSelect driver={driver}/>\r\n        </li>\r\n    ));\r\n\r\n    // No driver display\r\n    const defaultDriver = (\r\n        <li className=\"DriverList-Selector\">\r\n            <DriverSelect/>\r\n        </li>\r\n    )\r\n    \r\n    return(\r\n        <ul className=\"DriverList-Wrapper\">\r\n            { list.length ? list : defaultDriver }\r\n        </ul>\r\n    )\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { Driver, Handler2 } from '../types';\r\nimport { Marker, InfoWindow } from 'react-google-maps';\r\n\r\n// const Pin = {url:\"http://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png\", origin:{x:-10,y:0}};\r\n\r\nexport default function DriverMarker({driver, clickHandler}:{driver:Driver, clickHandler:Handler2<Driver, boolean>}) {\r\n    const [infoWindowVisibility, setInfoWindowVisibility] = useState<boolean>(false);\r\n    const onClick = () => {\r\n        setInfoWindowVisibility(!infoWindowVisibility);\r\n        clickHandler(driver, false);\r\n    }\r\n    return (\r\n        <Marker \r\n            position={driver.events[0].pos}\r\n            onClick={onClick}\r\n        >\r\n            { infoWindowVisibility && \r\n                <InfoWindow onCloseClick={() => setInfoWindowVisibility(false)}>\r\n                    <p>{driver.driverName}</p>\r\n                </InfoWindow>\r\n            }\r\n        </Marker>\r\n    )\r\n}","import React from 'react';\r\nimport { DriverEvent } from '../types';\r\nimport { Marker } from 'react-google-maps';\r\n\r\nconst Pin = {url:\"http://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png\", origin:{x:-12,y:0}};\r\n\r\nexport default function DriverMarker({event}:{event?:DriverEvent}) {\r\n    return (\r\n        <Marker position={event?.pos} icon={Pin}/>\r\n    )\r\n}","import React from 'react';\r\nimport { Driver, DriverEvent, Handler2 } from '../types';\r\nimport { GoogleMap, withGoogleMap } from 'react-google-maps';\r\nimport DriverMarker from './DriverMarker';\r\nimport EventMarker from './EventMarker'\r\n\r\nconst defaultCenter = {\r\n    // // Paris coordonates\r\n    // lat: 48.856614,\r\n    // lng: 2.3522219\r\n    lat:35.191766965947394,\r\n    lng:-90.0439453125\r\n}\r\n\r\nconst containerStyle = { \r\n    height: `50vh`\r\n}\r\n\r\nconst mapStyle = { \r\n    height: `100%`\r\n}\r\n\r\nexport const MapStyle = {\r\n    containerElement: <div style={containerStyle} />,\r\n    mapElement: <div style={mapStyle} />\r\n}\r\n\r\n\r\nfunction MapRender({recenter, currentDriver, drivers, clickHandler, event}:{recenter:boolean,currentDriver?:Driver, drivers:Driver[], clickHandler:Handler2<Driver|undefined, boolean>, event?:DriverEvent}) {\r\n    return(\r\n        <GoogleMap\r\n            defaultZoom={5}\r\n            defaultCenter={defaultCenter}\r\n            // disable \"CTRL + scroll to zoom\" message\r\n            options={{ gestureHandling: \"greedy\" }}\r\n            {...(recenter && currentDriver ? {center:currentDriver.events[0].pos} : {})}\r\n        >\r\n            {/* For unknown reason the map function give error if the is other siblings elements (only for synthax check, but compile properly) \r\n                So I wrap the map function in <></>\r\n                This is kinda ugly but it get rid of the \"Excessive stack depth comparing types 'FlatArray<Arr, ?>' and 'FlatArray<Arr, ?>'.\" error */}\r\n            <>\r\n            {drivers.map((driver, index) => (\r\n                // for ***** reason having 2 marker at the same position makes them unable to be deleted, so we make sure we don't put 2 marker atthe same place\r\n                driver.events[0].pos !== event?.pos && <DriverMarker key={driver.driverName + index} driver={driver} clickHandler={clickHandler} />\r\n            ))}\r\n            </>\r\n            <EventMarker event={event}/>\r\n        </GoogleMap>\r\n    )\r\n}\r\n\r\nexport default withGoogleMap(MapRender);\r\n","import React, { useState } from 'react';\r\nimport \"../css/DriverEvents.css\";\r\nimport { Driver, DriverEvent, Handler } from '../types'\r\n\r\nfunction DriverEventDisplay({event, clickHandle, selected}:{event:DriverEvent, clickHandle:Handler<never>, selected:boolean}) {\r\n    const now = new Date(event.eventTime);\r\n    const offsetMs = now.getTimezoneOffset() * 60 * 1000;\r\n    const dateLocal = new Date(now.getTime() - offsetMs);\r\n    const str = dateLocal.toISOString().slice(0, 19).replace(/-/g, \"/\").replace(\"T\", \" \");\r\n    return(\r\n        <tr onClick={clickHandle} className={\"button \" + (selected ? \"selected\" : \"\")}>\r\n            <td className=\"driverEvent-big\">{str}</td>\r\n            <td className=\"driverEvent-small\">{event.routeId}</td>\r\n            <td className=\"driverEvent-big\">{event.routeName}</td>\r\n            <td className=\"driverEvent-small\">{event.speed}</td>\r\n            <td className=\"driverEvent-big\">{event.eventType}</td>\r\n            <td className=\"driverEvent-small\">{event.foggy ? \"True\" : \"False\"}</td>\r\n            <td className=\"driverEvent-small\">{event.rainy ? \"True\" : \"False\"}</td>\r\n            <td className=\"driverEvent-small\">{event.windy ? \"True\" : \"False\"}</td>\r\n            <td className=\"driverEvent-last\">{event.congestionLevel}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default function DriverEvents({events, eventSelectHandle, currentDriver}:{events:DriverEvent[], eventSelectHandle:Handler<DriverEvent>, currentDriver:Driver}) {\r\n    const [selectedEvent, setSelectedEvent] = useState<number|undefined>(undefined)\r\n    const [driver, setDriver] = useState<Driver>(currentDriver);\r\n    if(currentDriver.driverId !== driver.driverId) {\r\n        setDriver(currentDriver);\r\n        setSelectedEvent(undefined);\r\n    }\r\n    const selectEvent = (event:DriverEvent, num:number) => {\r\n        setSelectedEvent(num);\r\n        eventSelectHandle(event);\r\n    }\r\n    return(\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th className=\"driverEvent-big\">Date :</th>\r\n                    <th className=\"driverEvent-small\">Route ID :</th>\r\n                    <th className=\"driverEvent-big\">Route name :</th>\r\n                    <th className=\"driverEvent-small\">Speed :</th>\r\n                    <th className=\"driverEvent-big\">Event type :</th>\r\n                    <th className=\"driverEvent-small\">Foggy :</th>\r\n                    <th className=\"driverEvent-small\">Rainy :</th>\r\n                    <th className=\"driverEvent-small\">Windy :</th>\r\n                    <th className=\"driverEvent-big\">Congestion level :</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {events.map((event, index) => (\r\n                    <DriverEventDisplay selected={index === selectedEvent} event={event} clickHandle={() => { selectEvent(event, index)} }/>\r\n                ))}\r\n            </tbody>\r\n            \r\n        </table>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport \"../css/DriverPage.css\";\r\nimport { Driver, Handler, Handler2, DriverEvent } from '../types'\r\nimport Map, { MapStyle } from './Map'\r\nimport DriverEvents from './DriverEvents'\r\n\r\nexport default function DriverMap({recenter,currentDriver, drivers, changeDriverHandler, changePageHandler, changeEventHandler, currentEvent}:{recenter:boolean, currentDriver?:Driver, drivers:Driver[], changeDriverHandler:Handler2<Driver|undefined, boolean>, changePageHandler:Handler<never>, changeEventHandler:Handler<DriverEvent|undefined>, currentEvent?:DriverEvent}) {\r\n    const eventSelectHandle = (event:DriverEvent) => {\r\n        changeEventHandler(event);\r\n    }\r\n    const clickHandler = (driver:Driver | undefined, recenter:boolean) => {\r\n        changeEventHandler(undefined);\r\n        changeDriverHandler(driver, recenter);\r\n    }\r\n    return(\r\n        <div className=\"DriverPage-wrapper\">\r\n            <div className=\"DriverPage-info-wrapper\">\r\n                <div className=\"DriverPage-info\">\r\n                    <p>Driver Name : {currentDriver === undefined ? \"No driver selected.\" : currentDriver.driverName} \r\n                    <br/>Truck ID : {currentDriver?.truckId}</p>\r\n                </div>\r\n                { currentDriver &&  <div className=\"DriverPage-switch-button button\" onClick={changePageHandler}>\r\n                    <p>\r\n                        Driver Info Page\r\n                    </p>\r\n                </div> }\r\n            </div>\r\n            <Map recenter={recenter} currentDriver={currentDriver} drivers={drivers} clickHandler={clickHandler} event={currentEvent} {...MapStyle}/>\r\n            {currentDriver && <DriverEvents currentDriver={currentDriver} events={currentDriver.events} eventSelectHandle={eventSelectHandle}/>}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport \"../css/DriverPage.css\";\r\nimport { Driver, Handler } from '../types'\r\n\r\nexport default function DriverInfo({currentDriver, changePageHandler}:{currentDriver:Driver, changePageHandler:Handler<never>}) {\r\n    return(\r\n        <div className=\"DriverPage-wrapper\">\r\n            <div className=\"DriverPage-info-wrapper\">\r\n                <div className=\"DriverPage-info\">\r\n                    <p>Driver Name : {currentDriver.driverName} \r\n                    <br/>Truck ID : {currentDriver.truckId}</p>\r\n                </div>\r\n                <div className=\"DriverPage-switch-button button\" onClick={changePageHandler}>\r\n                    <p>\r\n                        Driver Map Page\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React,{useState, useEffect} from 'react';\r\nimport './css/App.css';\r\nimport DriverList from './components/DriverList';\r\nimport { Driver, DriverEvent } from './types';\r\nimport LoadJson from \"./loadJson\"\r\nimport DriverMap from './components/DriverMap';\r\nimport DriverInfo from './components/DriverInfo';\r\n\r\nfunction App() {\r\n\t// hooks creation\r\n\tconst [drivers, setDrivers] = useState<Driver[]>([]);\r\n\tconst [currentDriver, setCurrentDriver] = useState<Driver|undefined>(undefined);\r\n\tconst [recenter, setRecenter] = useState<boolean>(false);\r\n\tconst [infoPage, setInfoPage] = useState<boolean>(false);\r\n\tconst [currentEvent, setCurrentEvent] = useState<DriverEvent|undefined>(undefined);\r\n\r\n\tconst changePageHandler = () => setInfoPage(!infoPage);\r\n\r\n\t// json fetching on reload\r\n\tuseEffect(()=>{\r\n    \tLoadJson(window.location.href + \"/drivers.json\", setDrivers);\r\n\t},[])\r\n\r\n\t// click handler\r\n\tconst currentDriverHandler = (driver:Driver|undefined, recenter:boolean) => {\r\n\t\tsetRecenter(recenter);\r\n\t\tsetCurrentEvent(undefined);\r\n\t\tsetCurrentDriver(driver);\r\n\t}\r\n\r\n\t// rendering\r\n\treturn (\r\n\t\t<div className=\"app-wrapper\">\r\n\t\t\t<div className=\"app-driverList\">\r\n\t\t\t\t<DriverList currentDriver={currentDriver} drivers={drivers} clickHandler={currentDriverHandler}/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"app-driverPage\">\r\n\t\t\t\t{infoPage && currentDriver ? \r\n\t\t\t\t\t<DriverInfo currentDriver={currentDriver} changePageHandler={changePageHandler}/> \r\n\t\t\t\t\t: \r\n\t\t\t\t\t<DriverMap currentEvent={currentEvent} changeEventHandler={setCurrentEvent} recenter={recenter} currentDriver={currentDriver} drivers={drivers} changeDriverHandler={currentDriverHandler} changePageHandler={changePageHandler}/>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import {Handler} from \"./types\"\r\n\r\n// Json loading and parsing\r\nexport default function LoadJson(path:string, callback:Handler<any>) {\r\n\tfetch(path)\r\n\t.then(response => {\r\n\t\treturn response.json()\r\n\t}, reason => {\r\n\t\tconsole.log(reason);\r\n\t})\r\n\t.then(myJson => {\r\n\t\tcallback(myJson)\r\n\t}, err => {\r\n\t\tconsole.log(err);\r\n\t})\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}