{"version":3,"sources":["components/DriverSelector.tsx","components/DriverList.tsx","functions.ts","components/DriverMarker.tsx","components/EventMarker.tsx","components/Map.tsx","components/DriverEvents.tsx","components/DriverMap.tsx","components/DriverInfo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DriverSelector","driver","className","driverName","DriverList","currentDriver","drivers","clickHandler","list","map","index","driverId","onClick","defaultDriver","length","timestampToDateStr","timestamp","now","Date","offsetMs","getTimezoneOffset","getTime","toISOString","slice","replace","DriverMarker","useState","infoWindowVisibility","setInfoWindowVisibility","position","events","pos","onCloseClick","Pin","url","origin","x","y","event","icon","defaultCenter","lat","lng","MapStyle","containerElement","style","height","mapElement","withGoogleMap","recenter","defaultZoom","options","gestureHandling","center","DriverEventDisplay","clickHandle","selected","eventTime","routeId","routeName","speed","eventType","foggy","rainy","windy","congestionLevel","DriverEvents","eventSelectHandle","undefined","selectedEvent","setSelectedEvent","setDriver","num","selectEvent","DriverMap","changeDriverHandler","changePageHandler","changeEventHandler","currentEvent","truckId","Map","formatCoords","require","EventInfo","format","DriverInfo","setCurrentEvent","App","setDrivers","setCurrentDriver","setRecenter","infoPage","setInfoPage","useEffect","path","callback","window","location","href","fetch","then","response","json","reason","console","log","myJson","err","currentDriverHandler","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac85ba3b.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"../css/DriverList.css\";\r\nimport { Driver } from '../types'\r\n\r\nexport default function DriverSelector({driver}:{driver?:Driver}) {\r\n    return(\r\n        <div className=\"DriverSelect-wrapper\">\r\n            <p className=\"DriverSelect-name\">\r\n                {driver?.driverName || \"No driver\"}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport \"../css/DriverList.css\";\r\nimport DriverSelect from \"./DriverSelector\"\r\nimport { Driver, Handler2 } from '../types'\r\n\r\nexport default function DriverList({currentDriver, drivers,clickHandler}:{currentDriver?:Driver, drivers:Driver[], clickHandler:Handler2<Driver|undefined, boolean>}) {\r\n    const list = drivers.map((driver, index) => (\r\n        <li className = {\"DriverList-Selector button \" + (driver.driverId === currentDriver?.driverId ? \"selected\" : \"\")} key={driver.driverName + index} onClick={() => clickHandler(driver, true)}>\r\n            <DriverSelect driver={driver}/>\r\n        </li>\r\n    ));\r\n\r\n    // No driver display\r\n    const defaultDriver = (\r\n        <li className=\"DriverList-Selector\">\r\n            <DriverSelect/>\r\n        </li>\r\n    )\r\n    \r\n    return(\r\n        <ul className=\"DriverList-Wrapper\">\r\n            { list.length ? list : defaultDriver }\r\n        </ul>\r\n    )\r\n}\r\n\r\n","import {Handler} from \"./types\"\r\n\r\n// Json loading and parsing\r\nexport function LoadJson(path:string, callback:Handler<any>) {\r\n\tfetch(path)\r\n\t.then(response => {\r\n\t\treturn response.json()\r\n\t}, reason => {\r\n\t\tconsole.log(reason);\r\n\t})\r\n\t.then(myJson => {\r\n\t\tcallback(myJson)\r\n\t}, err => {\r\n\t\tconsole.log(err);\r\n\t})\r\n}\r\n\r\nexport function timestampToDateStr(timestamp:number) {\r\n\tconst now = new Date(timestamp);\r\n    const offsetMs = now.getTimezoneOffset() * 60 * 1000;\r\n    const dateLocal = new Date(now.getTime() - offsetMs);\r\n    return dateLocal.toISOString().slice(0, 19).replace(/-/g, \"/\").replace(\"T\", \" \");\r\n}","import React, { useState } from 'react';\r\nimport { Driver, Handler2 } from '../types';\r\nimport { Marker, InfoWindow } from 'react-google-maps';\r\n\r\n// const Pin = {url:\"http://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png\", origin:{x:-10,y:0}};\r\n\r\nexport default function DriverMarker({driver, clickHandler}:{driver:Driver, clickHandler:Handler2<Driver, boolean>}) {\r\n    const [infoWindowVisibility, setInfoWindowVisibility] = useState<boolean>(false);\r\n    const onClick = () => {\r\n        setInfoWindowVisibility(!infoWindowVisibility);\r\n        clickHandler(driver, false);\r\n    }\r\n    return (\r\n        <Marker \r\n            position={driver.events[0].pos}\r\n            onClick={onClick}\r\n        >\r\n            { infoWindowVisibility && \r\n                <InfoWindow onCloseClick={() => setInfoWindowVisibility(false)}>\r\n                    <p>{driver.driverName}</p>\r\n                </InfoWindow>\r\n            }\r\n        </Marker>\r\n    )\r\n}","import React from 'react';\r\nimport { DriverEvent } from '../types';\r\nimport { Marker } from 'react-google-maps';\r\n\r\nconst Pin = {url:\"http://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png\", origin:{x:-12,y:0}};\r\n\r\nexport default function DriverMarker({event}:{event?:DriverEvent}) {\r\n    return (\r\n        <Marker position={event?.pos} icon={Pin}/>\r\n    )\r\n}","import React from 'react';\r\nimport { Driver, DriverEvent, Handler2 } from '../types';\r\nimport { GoogleMap, withGoogleMap } from 'react-google-maps';\r\nimport DriverMarker from './DriverMarker';\r\nimport EventMarker from './EventMarker'\r\n\r\nconst defaultCenter = {\r\n    // // Paris coordonates\r\n    // lat: 48.856614,\r\n    // lng: 2.3522219\r\n    lat:35.191766965947394,\r\n    lng:-90.0439453125\r\n}\r\n\r\nconst containerStyle = { \r\n    height: `50vh`\r\n}\r\n\r\nconst mapStyle = { \r\n    height: `100%`\r\n}\r\n\r\nexport const MapStyle = {\r\n    containerElement: <div style={containerStyle} />,\r\n    mapElement: <div style={mapStyle} />\r\n}\r\n\r\n\r\nfunction MapRender({recenter, currentDriver, drivers, clickHandler, event}:{recenter:boolean,currentDriver?:Driver, drivers:Driver[], clickHandler:Handler2<Driver|undefined, boolean>, event?:DriverEvent}) {\r\n    return(\r\n        <GoogleMap\r\n            defaultZoom={5}\r\n            defaultCenter={defaultCenter}\r\n            // disable \"CTRL + scroll to zoom\" message\r\n            options={{ gestureHandling: \"greedy\" }}\r\n            {...(recenter && currentDriver ? {center:currentDriver.events[0].pos} : {})}\r\n        >\r\n            {/* For unknown reason the map function give error if the is other siblings elements (only for synthax check, but compile properly) \r\n                So I wrap the map function in <></>\r\n                This is kinda ugly but it get rid of the \"Excessive stack depth comparing types 'FlatArray<Arr, ?>' and 'FlatArray<Arr, ?>'.\" error */}\r\n            <>\r\n            {drivers.map((driver, index) => (\r\n                // for ***** reason having 2 marker at the same position makes them unable to be deleted, so we make sure we don't put 2 marker atthe same place\r\n                driver.events[0].pos !== event?.pos && <DriverMarker key={driver.driverName + index} driver={driver} clickHandler={clickHandler} />\r\n            ))}\r\n            </>\r\n            <EventMarker event={event}/>\r\n        </GoogleMap>\r\n    )\r\n}\r\n\r\nexport default withGoogleMap(MapRender);\r\n","import React, { useState } from 'react';\r\nimport \"../css/DriverEvents.css\";\r\nimport { Driver, DriverEvent, Handler } from '../types'\r\nimport { timestampToDateStr } from \"../functions\"\r\n\r\nfunction DriverEventDisplay({event, clickHandle, selected}:{event:DriverEvent, clickHandle:Handler<never>, selected:boolean}) {\r\n    return(\r\n        <tr onClick={clickHandle} className={\"button \" + (selected ? \"selected\" : \"\")}>\r\n            <td className=\"driverEvent-big\">{timestampToDateStr(event.eventTime)}</td>\r\n            <td className=\"driverEvent-small\">{event.routeId}</td>\r\n            <td className=\"driverEvent-big\">{event.routeName}</td>\r\n            <td className=\"driverEvent-small\">{event.speed}</td>\r\n            <td className=\"driverEvent-big\">{event.eventType}</td>\r\n            <td className=\"driverEvent-small\">{event.foggy ? \"True\" : \"False\"}</td>\r\n            <td className=\"driverEvent-small\">{event.rainy ? \"True\" : \"False\"}</td>\r\n            <td className=\"driverEvent-small\">{event.windy ? \"True\" : \"False\"}</td>\r\n            <td className=\"driverEvent-last\">{event.congestionLevel}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default function DriverEvents({eventSelectHandle, currentDriver}:{eventSelectHandle:Handler<DriverEvent>, currentDriver:Driver}) {\r\n    const [selectedEvent, setSelectedEvent] = useState<number|undefined>(undefined)\r\n    const [driver, setDriver] = useState<Driver>(currentDriver);\r\n    if(currentDriver.driverId !== driver.driverId) {\r\n        setDriver(currentDriver);\r\n        setSelectedEvent(undefined);\r\n    }\r\n    const selectEvent = (event:DriverEvent, num:number) => {\r\n        setSelectedEvent(num);\r\n        eventSelectHandle(event);\r\n    }\r\n    return(\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th className=\"driverEvent-big\">Date :</th>\r\n                    <th className=\"driverEvent-small\">Route ID :</th>\r\n                    <th className=\"driverEvent-big\">Route name :</th>\r\n                    <th className=\"driverEvent-small\">Speed :</th>\r\n                    <th className=\"driverEvent-big\">Event type :</th>\r\n                    <th className=\"driverEvent-small\">Foggy :</th>\r\n                    <th className=\"driverEvent-small\">Rainy :</th>\r\n                    <th className=\"driverEvent-small\">Windy :</th>\r\n                    <th className=\"driverEvent-big\">Congestion level :</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {currentDriver.events.map((event, index) => (\r\n                    <DriverEventDisplay selected={index === selectedEvent} event={event} clickHandle={() => { selectEvent(event, index)} }/>\r\n                ))}\r\n            </tbody>\r\n            \r\n        </table>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport \"../css/DriverPage.css\";\r\nimport { Driver, Handler, Handler2, DriverEvent } from '../types'\r\nimport Map, { MapStyle } from './Map'\r\nimport DriverEvents from './DriverEvents'\r\n\r\nexport default function DriverMap({recenter,currentDriver, drivers, changeDriverHandler, changePageHandler, changeEventHandler, currentEvent}:{recenter:boolean, currentDriver?:Driver, drivers:Driver[], changeDriverHandler:Handler2<Driver|undefined, boolean>, changePageHandler:Handler<never>, changeEventHandler:Handler<DriverEvent|undefined>, currentEvent?:DriverEvent}) {\r\n    const eventSelectHandle = (event:DriverEvent) => {\r\n        changeEventHandler(event);\r\n    }\r\n    const clickHandler = (driver:Driver | undefined, recenter:boolean) => {\r\n        changeEventHandler(undefined);\r\n        changeDriverHandler(driver, recenter);\r\n    }\r\n    return(\r\n        <div className=\"DriverPage-wrapper\">\r\n            <div className=\"DriverPage-info-wrapper\">\r\n                <div className=\"DriverPage-info\">\r\n                    <p>Driver Name : {currentDriver === undefined ? \"No driver selected.\" : currentDriver.driverName} \r\n                    <br/>Truck ID : {currentDriver?.truckId}</p>\r\n                </div>\r\n                { currentDriver &&  <div className=\"DriverPage-switch-button button\" onClick={changePageHandler}>\r\n                    <p>\r\n                        Driver Info Page\r\n                    </p>\r\n                </div> }\r\n            </div>\r\n            <Map recenter={recenter} currentDriver={currentDriver} drivers={drivers} clickHandler={clickHandler} event={currentEvent} {...MapStyle}/>\r\n            {currentDriver && <DriverEvents currentDriver={currentDriver} eventSelectHandle={eventSelectHandle}/>}\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport \"../css/DriverPage.css\";\r\nimport { Driver, DriverEvent, Handler } from '../types'\r\nimport DriverEvents from \"./DriverEvents\"\r\nimport { timestampToDateStr } from \"../functions\"\r\n\r\n// no typescript version of this package, but it does exactly what I need so im gonna use it anyway\r\nconst formatCoords = require('formatcoords')\r\n\r\n\r\nfunction EventInfo({event}:{event:DriverEvent}) {\r\n    return(\r\n        <div>\r\n            <p>Date : {timestampToDateStr(event.eventTime)}</p>\r\n            <p>Route ID : {event.routeId}</p>\r\n            <p>Route Name : {event.routeName}</p>\r\n            <p>Speed : {event.speed}</p>\r\n            <p>Event type : {event.eventType}</p>\r\n            <p>Foggy : {event.foggy ? \"True\" : \"False\"}</p>\r\n            <p>Rainy : {event.rainy ? \"True\" : \"False\"}</p>\r\n            <p>Windy : {event.windy ? \"True\" : \"False\"}</p>\r\n            <p>Congestion level : {event.congestionLevel}</p>\r\n            <p>Event position : {formatCoords(event.pos.lat, event.pos.lng).format()}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function DriverInfo({currentDriver, changePageHandler}:{currentDriver:Driver, changePageHandler:Handler<never>}) {\r\n    const [currentEvent, setCurrentEvent] = useState<DriverEvent|undefined>(undefined)\r\n    return(\r\n        <div className=\"DriverPage-wrapper\">\r\n            <div className=\"DriverPage-info-wrapper\">\r\n                <div className=\"DriverPage-info\">\r\n                    <p>Driver Name : {currentDriver.driverName} \r\n                    <br/>Truck ID : {currentDriver.truckId}</p>\r\n                </div>\r\n                <div className=\"DriverPage-switch-button button\" onClick={changePageHandler}>\r\n                    <p>\r\n                        Driver Map Page\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <DriverEvents currentDriver={currentDriver} eventSelectHandle={setCurrentEvent} />\r\n            {currentEvent && <EventInfo event={currentEvent}/>}\r\n        </div>\r\n    )\r\n}","import React,{useState, useEffect} from 'react';\r\nimport './css/App.css';\r\nimport DriverList from './components/DriverList';\r\nimport { Driver, DriverEvent } from './types';\r\nimport { LoadJson } from \"./functions\"\r\nimport DriverMap from './components/DriverMap';\r\nimport DriverInfo from './components/DriverInfo';\r\n\r\nfunction App() {\r\n\t// hooks creation\r\n\tconst [drivers, setDrivers] = useState<Driver[]>([]);\r\n\tconst [currentDriver, setCurrentDriver] = useState<Driver|undefined>(undefined);\r\n\tconst [recenter, setRecenter] = useState<boolean>(false);\r\n\tconst [infoPage, setInfoPage] = useState<boolean>(false);\r\n\tconst [currentEvent, setCurrentEvent] = useState<DriverEvent|undefined>(undefined);\r\n\r\n\tconst changePageHandler = () => {\r\n\t\tsetCurrentEvent(undefined);\r\n\t\tsetInfoPage(!infoPage);\r\n\t}\r\n\r\n\t// json fetching on reload\r\n\tuseEffect(()=>{\r\n    \tLoadJson(window.location.href + \"/drivers.json\", setDrivers);\r\n\t},[])\r\n\r\n\t// click handler\r\n\tconst currentDriverHandler = (driver:Driver|undefined, recenter:boolean) => {\r\n\t\tsetRecenter(recenter);\r\n\t\tsetCurrentEvent(undefined);\r\n\t\tsetCurrentDriver(driver);\r\n\t}\r\n\r\n\t// rendering\r\n\treturn (\r\n\t\t<div className=\"app-wrapper\">\r\n\t\t\t<div className=\"app-driverList\">\r\n\t\t\t\t<DriverList currentDriver={currentDriver} drivers={drivers} clickHandler={currentDriverHandler}/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"app-driverPage\">\r\n\t\t\t\t{infoPage && currentDriver ? \r\n\t\t\t\t\t<DriverInfo currentDriver={currentDriver} changePageHandler={changePageHandler}/> \r\n\t\t\t\t\t: \r\n\t\t\t\t\t<DriverMap currentEvent={currentEvent} changeEventHandler={setCurrentEvent} recenter={recenter} currentDriver={currentDriver} drivers={drivers} changeDriverHandler={currentDriverHandler} changePageHandler={changePageHandler}/>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}