{"version":3,"sources":["components/DriverList.tsx","components/DriverMarker.tsx","components/EventMarker.tsx","components/Map.tsx","functions.ts","components/EventsList.tsx","components/EventInfo.tsx","components/DriverPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DriverSelector","driver","className","driverName","DriverList","currentDriver","drivers","clickHandler","list","map","index","onClick","defaultDriver","length","DriverMarker","useState","infoWindowVisibility","setInfoWindowVisibility","position","lastPos","onCloseClick","Pin","url","origin","x","y","event","pos","icon","defaultCenter","lat","lng","containerStyle","visible","height","mapStyle","withGoogleMap","recenter","defaultZoom","options","gestureHandling","center","timestampToDateStr","timestamp","now","Date","offsetMs","getTimezoneOffset","getTime","toISOString","slice","replace","driverEventTimeComp","a","b","eventTime","driverEventPosFilter","val","self","driverEventRouteIdComp","routeId","driverEventRouteNameComp","routeName","localeCompare","driverEventSpeedComp","speed","driverEventTypeComp","eventType","driverEventCongestionLvlComp","congestionLevel","driverEventWindyComp","windy","driverEventRainyComp","rainy","driverEventFoggyComp","foggy","DRIVER_API_URL","classBig","classSma","DriverEventDisplay","clickHandle","selected","EventsList","currentEvent","eventSelectHandle","events","reversedComp","setReversedComp","currentComp","setCurrentComp","topRowRef","useRef","useEffect","current","scrollIntoView","foo","reversed","SortBy","sortFn","ref","filter","sort","formatCoords","require","EventInfo","format","DriverPage","currentDriverHandler","eventInfoRender","setEventInfoRender","undefined","setCurrentEvent","setEvents","fetch","driverId","then","res","json","data","truckId","Map","containerElement","style","mapElement","App","setDrivers","setCurrentDriver","setRecenter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e9bdcb2.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"../css/DriverList.css\";\r\n\r\nfunction DriverSelector({driver}:{driver?:Driver}) {\r\n    return(\r\n        <div className=\"DriverSelect-wrapper\">\r\n            <p className=\"DriverSelect-name\">\r\n                {driver?.driverName || \"No driver\"}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function DriverList({currentDriver, drivers,clickHandler}:{currentDriver:Driver|undefined, drivers:Driver[], clickHandler:Handler2<Driver|undefined, boolean>}) {\r\n    const list = drivers.map((driver, index) => (\r\n        <li className = {\"DriverList-Selector button \" + (driver === currentDriver ? \"selected\" : \"\")} key={driver.driverName + index} onClick={() => clickHandler(driver, true)}>\r\n            <DriverSelector driver={driver}/>\r\n        </li>\r\n    ));\r\n\r\n    // No driver display\r\n    const defaultDriver = (\r\n        <li className=\"DriverList-Selector\">\r\n            <DriverSelector />\r\n        </li>\r\n    )\r\n    \r\n    return (\r\n        <ul className=\"DriverList-Wrapper noselect\">\r\n            { list.length ? list : defaultDriver }\r\n        </ul>\r\n    )\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { Marker, InfoWindow } from 'react-google-maps';\r\n\r\n// const Pin = {url:\"http://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png\", origin:{x:-10,y:0}};\r\n\r\nexport default function DriverMarker({driver, clickHandler}:{driver:Driver, clickHandler:Handler2<Driver, boolean>}) {\r\n    const [infoWindowVisibility, setInfoWindowVisibility] = useState<boolean>(false);\r\n    // const [lastPos, setLastPos] = useState<Position | undefined>(undefined);\r\n    \r\n    const onClick = () => {\r\n        setInfoWindowVisibility(!infoWindowVisibility);\r\n        clickHandler(driver, false);\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     fetch(\"http://localhost:3000/get/driverpos/\" + driver.driverId)\r\n    //     .then(res => res.json())\r\n    //     .then(data => setLastPos(data))\r\n    // }, [driver]);\r\n    \r\n    return (\r\n        <Marker \r\n            position={driver.lastPos}\r\n            onClick={onClick}\r\n        >\r\n            { infoWindowVisibility && \r\n                <InfoWindow onCloseClick={() => setInfoWindowVisibility(false)}>\r\n                    <p>{driver.driverName}</p>\r\n                </InfoWindow>\r\n            }\r\n        </Marker>\r\n    )\r\n}","import React from 'react';\r\nimport { Marker } from 'react-google-maps';\r\n\r\nconst Pin = {url:\"http://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png\", origin:{x:-12,y:0}};\r\n\r\nexport default function DriverMarker({event}:{event:DriverEvent|undefined}) {\r\n    return (\r\n        <Marker position={event?.pos} icon={Pin}/>\r\n    )\r\n}","import React from 'react';\r\nimport { GoogleMap, withGoogleMap } from 'react-google-maps';\r\nimport DriverMarker from './DriverMarker';\r\nimport EventMarker from './EventMarker'\r\n\r\nconst defaultCenter = {\r\n    // // Paris coordonates\r\n    // lat: 48.856614,\r\n    // lng: 2.3522219\r\n    lat:35.191766965947394,\r\n    lng:-90.0439453125\r\n}\r\n\r\nconst containerStyle = (visible:boolean) => ({ \r\n    height: (visible ? `50vh` : \"0\")\r\n})\r\n\r\nconst mapStyle = { \r\n    height: `100%`\r\n}\r\n\r\nexport const MapStyle = (visible:boolean) => ({\r\n    containerElement: <div style={containerStyle(visible)} />,\r\n    mapElement: <div style={mapStyle} />\r\n})\r\n\r\n\r\nfunction MapRender({recenter, currentDriver, drivers, clickHandler, event}:{recenter:boolean,currentDriver:Driver|undefined, drivers:Driver[], clickHandler:Handler2<Driver, boolean>, event:DriverEvent|undefined}) {\r\n    \r\n\r\n    \r\n    return(\r\n        <GoogleMap\r\n            defaultZoom={5}\r\n            defaultCenter={defaultCenter}\r\n            // disable \"CTRL + scroll to zoom\" message\r\n            options={{ gestureHandling: \"greedy\" }}\r\n            {...(recenter && currentDriver ? {center:currentDriver.lastPos} : {})}\r\n        >\r\n            {drivers.map((driver, index) => (\r\n                // for ***** reason having 2 marker at the same position makes them unable to be deleted, so we make sure we don't put 2 marker atthe same place\r\n                driver.lastPos !== event?.pos && <DriverMarker key={driver.driverName + index} driver={driver} clickHandler={clickHandler} />\r\n            ))}\r\n            <EventMarker event={event}/>\r\n        </GoogleMap>\r\n    )\r\n}\r\n\r\nexport default withGoogleMap(MapRender);\r\n","// Json loading and parsing\r\nexport function LoadJson(path:string, callback:Handler<any>) {\r\n\tfetch(path)\r\n\t.then(response => {\r\n\t\treturn response.json()\r\n\t}, reason => {\r\n\t\tconsole.log(reason);\r\n\t})\r\n\t.then(myJson => {\r\n\t\tcallback(myJson)\r\n\t}, err => {\r\n\t\tconsole.log(err);\r\n\t})\r\n}\r\n\r\nexport function timestampToDateStr(timestamp:number) {\r\n\tconst now = new Date(timestamp);\r\n    const offsetMs = now.getTimezoneOffset() * 60 * 1000;\r\n    const dateLocal = new Date(now.getTime() - offsetMs);\r\n    return dateLocal.toISOString().slice(0, 19).replace(/-/g, \"/\").replace(\"T\", \" \");\r\n}\r\n\r\nexport function driverEventTimeComp(a:DriverEvent, b:DriverEvent) {\r\n\treturn b.eventTime - a.eventTime;\r\n}\r\n\r\nfunction driverEventPosComp(a:DriverEvent, b:DriverEvent) {\r\n\treturn a.pos.lat === b.pos.lat && a.pos.lng === b.pos.lng;\r\n}\r\n\r\nexport function driverEventPosFilter(val:DriverEvent, index:number, self:DriverEvent[]) {\r\n\treturn !index || !driverEventPosComp(val, self[index - 1]);\r\n}\r\n\r\nexport function driverEventRouteIdComp(a:DriverEvent, b:DriverEvent) {\r\n\treturn b.routeId - a.routeId;\r\n}\r\n\r\nexport function driverEventRouteNameComp(a:DriverEvent, b:DriverEvent) {\r\n\treturn b.routeName.localeCompare(a.routeName);\r\n}\r\n\r\nexport function driverEventSpeedComp(a:DriverEvent, b:DriverEvent) {\r\n\treturn b.speed - a.speed;\r\n}\r\n\r\nexport function driverEventTypeComp(a:DriverEvent, b:DriverEvent) {\r\n\treturn b.eventType.localeCompare(a.eventType);\r\n}\r\n\r\nexport function driverEventCongestionLvlComp(a:DriverEvent, b:DriverEvent) {\r\n\treturn b.congestionLevel - a.congestionLevel;\r\n}\r\n\r\nexport function driverEventWindyComp(a:DriverEvent, b:DriverEvent) {\r\n\tif(a.windy === b.windy) return 0;\r\n\tif(a.windy) return -1;\r\n\treturn 1;\r\n}\r\n\r\nexport function driverEventRainyComp(a:DriverEvent, b:DriverEvent) {\r\n\tif(a.rainy === b.rainy) return 0;\r\n\tif(a.rainy) return -1;\r\n\treturn 1;\r\n}\r\n\r\nexport function driverEventFoggyComp(a:DriverEvent, b:DriverEvent) {\r\n\tif(a.foggy === b.foggy) return 0;\r\n\tif(a.foggy) return -1;\r\n\treturn 1;\r\n}\r\n\r\nexport function compWay<T>(foo:CompFunc<T>, reversed:boolean) {\r\n\tconst bar:CompFunc<T> = (a,b) => (reversed ? -1 : 1) * foo(a,b);\r\n\treturn bar;\r\n}\r\n\r\nexport const DRIVER_API_URL = \"https://pst-2021-server.herokuapp.com\"","import React, { useEffect, useRef, useState } from 'react';\r\nimport \"../css/DriverEvents.css\";\r\nimport \"../css/DriverList.css\";\r\nimport { timestampToDateStr, driverEventPosFilter, driverEventTimeComp, compWay, driverEventCongestionLvlComp, driverEventRouteIdComp, driverEventTypeComp, driverEventRouteNameComp, driverEventSpeedComp, driverEventWindyComp, driverEventFoggyComp, driverEventRainyComp } from \"../functions\"\r\n\r\nconst classBig = \"driverEvent-big\";\r\nconst classSma = \"driverEvent-small\";\r\n\r\nfunction DriverEventDisplay({event, clickHandle, selected}:{event:DriverEvent, clickHandle:Handler<never>, selected:boolean}) {\r\n    return(\r\n        <tr onClick={clickHandle} className={\"button \" + (selected ? \"selected\" : \"\")}>\r\n            <td className={classBig}>{timestampToDateStr(event.eventTime)}</td>\r\n            <td className={classSma}>{event.routeId}</td>\r\n            <td className={classBig}>{event.routeName}</td>\r\n            <td className={classSma}>{event.speed}</td>\r\n            <td className={classBig}>{event.eventType}</td>\r\n            <td className={classSma}>{event.foggy ? \"True\" : \"False\"}</td>\r\n            <td className={classSma}>{event.rainy ? \"True\" : \"False\"}</td>\r\n            <td className={classSma}>{event.windy ? \"True\" : \"False\"}</td>\r\n            <td className=\"driverEvent-last\">{event.congestionLevel}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default function EventsList({currentEvent, eventSelectHandle, events}:{currentEvent:DriverEvent|undefined, eventSelectHandle:Handler<DriverEvent|undefined>, events:DriverEvent[]}) {\r\n    const [reversedComp, setReversedComp] = useState<boolean>(false);\r\n    const [currentComp, setCurrentComp] = useState<CompFunc<DriverEvent>>(()=> driverEventTimeComp);\r\n\r\n    // top row of the table reference\r\n    const topRowRef = useRef<HTMLTableRowElement>(null);\r\n\r\n    // execute when switching driver\r\n    useEffect(() => {\r\n        // reset all states\r\n        setReversedComp(false);\r\n        setCurrentComp(() => driverEventTimeComp);\r\n        // scroll back to top when switching driver\r\n        topRowRef.current?.scrollIntoView();\r\n    },[events]);\r\n    \r\n    const SortBy = (sortFn:CompFunc<DriverEvent>) => {\r\n        if(currentComp === sortFn) {\r\n            setReversedComp(!reversedComp);\r\n        } else {\r\n            setReversedComp(false);\r\n            setCurrentComp(() => sortFn);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <table className=\"noselect\">\r\n            <thead>\r\n                <tr className=\"driverEvent-Title\">\r\n                    <th className={classBig} onClick={() => SortBy(driverEventTimeComp)}><div>Date :</div></th>\r\n                    <th className={classSma} onClick={() => SortBy(driverEventRouteIdComp)}><div>Route ID :</div></th>\r\n                    <th className={classBig} onClick={() => SortBy(driverEventRouteNameComp)}><div>Route name :</div></th>\r\n                    <th className={classSma} onClick={() => SortBy(driverEventSpeedComp)}><div>Speed :</div></th>\r\n                    <th className={classBig} onClick={() => SortBy(driverEventTypeComp)}><div>Event type :</div></th>\r\n                    <th className={classSma} onClick={() => SortBy(driverEventFoggyComp)}><div>Foggy :</div></th>\r\n                    <th className={classSma} onClick={() => SortBy(driverEventRainyComp)}><div>Rainy :</div></th>\r\n                    <th className={classSma} onClick={() => SortBy(driverEventWindyComp)}><div>Windy :</div></th>\r\n                    <th className={classBig} onClick={() => SortBy(driverEventCongestionLvlComp)}><div>Congestion level :</div></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                { /* need this empty row to scroll back to the top */ }\r\n                <tr ref={topRowRef}></tr>\r\n                {/* first remove consecutive events with same pos, only the first one is kept\r\n                    Then sort with the given comparaison function, compWay just reverse the output of the function\r\n                    then map the result  */}\r\n                {events.filter(driverEventPosFilter).sort(compWay(currentComp, reversedComp)).map((event, index) => (\r\n                    <DriverEventDisplay key={event.eventTime + index} selected={event === currentEvent} event={event} clickHandle={() => eventSelectHandle(event) }/>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport \"../css/DriverPage.css\";\r\nimport { timestampToDateStr } from \"../functions\"\r\n\r\n// no typescript version of this package, but it does exactly what I need so im gonna use it anyway\r\nconst formatCoords = require('formatcoords')\r\n\r\n\r\nexport default function EventInfo({event}:{event:DriverEvent}) {\r\n    return(\r\n        <div>\r\n            <p><b>Date :</b> {timestampToDateStr(event.eventTime)}</p>\r\n            <p><b>Route ID :</b> {event.routeId}</p>\r\n            <p><b>Route Name :</b> {event.routeName}</p>\r\n            <p><b>Speed :</b> {event.speed} km/h</p>\r\n            <p><b>Event type :</b> {event.eventType}</p>\r\n            <p><b>Foggy :</b> {event.foggy ? \"True\" : \"False\"}</p>\r\n            <p><b>Rainy :</b> {event.rainy ? \"True\" : \"False\"}</p>\r\n            <p><b>Windy :</b> {event.windy ? \"True\" : \"False\"}</p>\r\n            <p><b>Congestion level :</b> {event.congestionLevel}</p>\r\n            <p><b>Event position :</b> {formatCoords(event.pos.lat, event.pos.lng).format()}</p>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport \"../css/DriverPage.css\";\r\nimport Map, {MapStyle} from './Map'\r\nimport EventsList from \"./EventsList\"\r\nimport EventInfo from \"./EventInfo\"\r\nimport { DRIVER_API_URL } from '../functions';\r\n\r\n\r\nexport default function DriverPage({currentDriver, drivers, recenter, currentDriverHandler}:{currentDriverHandler:Handler2<Driver, boolean>, currentDriver:Driver|undefined, drivers:Driver[], recenter:boolean}) {\r\n    const [eventInfoRender, setEventInfoRender] = useState<boolean>(false);\r\n    const [currentEvent, setCurrentEvent] = useState<DriverEvent|undefined>(undefined)\r\n    const [events, setEvents] = useState<DriverEvent[]|undefined>(undefined);\r\n\r\n    // switch beetween event info page and event map page\r\n    const changePageHandler = () => setEventInfoRender(!eventInfoRender)\r\n\r\n    // trigger everytime the selected drive change\r\n    useEffect(() => {\r\n        setCurrentEvent(undefined);\r\n        if(currentDriver) {\r\n            fetch(DRIVER_API_URL + \"/get/events/\" + currentDriver.driverId)\r\n            .then(res => res.json())\r\n            .then(data => setEvents(data))\r\n        }\r\n    },[currentDriver]);\r\n\r\n    return (\r\n        <div className=\"DriverPage-wrapper\">\r\n            <div className=\"DriverPage-info-wrapper\">\r\n                <div className=\"DriverPage-info\">\r\n                    <p>Driver Name : {currentDriver === undefined ? \"No driver selected.\" : currentDriver.driverName} \r\n                    <br/>Truck ID : {currentDriver?.truckId}</p>\r\n                </div>\r\n                { currentDriver &&  <div className=\"DriverPage-switch-button button noselect\" onClick={changePageHandler}>\r\n                    <p>\r\n                        {eventInfoRender ? \"Events Map Page\" : \"Events Info Page\"}\r\n                    </p>\r\n                </div> }\r\n            </div>\r\n\r\n            <Map recenter={recenter} currentDriver={currentDriver} drivers={drivers} clickHandler={currentDriverHandler} event={currentEvent} {...(MapStyle(!eventInfoRender))}/>\r\n            \r\n            { events && <EventsList currentEvent={currentEvent} events={events} eventSelectHandle={setCurrentEvent} /> }\r\n            \r\n            { eventInfoRender && currentEvent &&  <EventInfo event={currentEvent} />}\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\r\nimport './css/App.css';\r\nimport DriverList from './components/DriverList';\r\n// import { LoadJson } from \"./functions\"\r\nimport DriverPage from './components/DriverPage'\r\nimport {DRIVER_API_URL} from \"./functions\"\r\n\r\nfunction App() {\r\n\t// hooks creation\r\n\tconst [drivers, setDrivers] = useState<Driver[]>([]);\r\n\tconst [currentDriver, setCurrentDriver] = useState<Driver|undefined>(undefined);\r\n\tconst [recenter, setRecenter] = useState<boolean>(false);\r\n\r\n\t// json fetching on reload\r\n\tuseEffect(()=>{\r\n    \t// LoadJson(window.location.href + \"/drivers.json\", setDrivers);\r\n\t\tfetch(DRIVER_API_URL + \"/get/drivers\")\r\n        .then(res => res.json())\r\n        .then(data => setDrivers(data))\r\n\t},[])\r\n\r\n\t// click handler\r\n\tconst currentDriverHandler = (driver:Driver|undefined, recenter:boolean) => {\r\n\t\tsetRecenter(recenter);\r\n\t\tsetCurrentDriver(driver);\r\n\t}\r\n\r\n\t// rendering\r\n\treturn (\r\n\t\t<div className=\"app-wrapper\">\r\n\t\t\t<div className=\"app-driverList\">\r\n\t\t\t\t<DriverList currentDriver={currentDriver} drivers={drivers} clickHandler={currentDriverHandler}/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"app-driverPage\">\r\n\t\t\t\t<DriverPage currentDriver={currentDriver} drivers={drivers} currentDriverHandler={currentDriverHandler} recenter={recenter} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}